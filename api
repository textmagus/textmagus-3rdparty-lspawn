os _G.os (module)\nExtends Lua's `os` package to provide spawn functionality.
spawn os.spawn(working_dir, argv, env, stdin, stdout_cb, stderr_cb, exit_cb)\nSpawns an interactive child process in a separate thread using GTK.\n@param working_dir The child's UTF-8 current working directory (cwd) or `nil`\n  to inherit Textadept's.\n@param argv A string name of the program to execute or an `arg`-like table\n  containing the program's name followed by arguments to pass to it. Your\n  `PATH` is searched for program names. Arguments are automatically quoted\n  correctly. All strings must be encoded in UTF-8.\n@param env A table containing `'KEY=VALUE'` strings of environment variables\n  for the child's environment or `nil` to inherit Textadept's. All strings\n  must be encoded in UTF-8.\n@param stdin String standard input to initially pass to the child or `nil`.\n@param stdout_cb A Lua function that accepts a string parameter for the\n  standard output from the child. Stdout is read asynchronously in 1KB blocks\n  or however much data is available at the time. It is encoded in `_CHARSET`.\n@param stderr_cb A Lua function that accepts a string parameter for the\n  standard error from the child. Stderr is read asynchronously in 1KB blocks\n  or however much data is available at the time. It is encoded in `_CHARSET`.\n@param exit_cb A Lua function that is called when the child process finishes.\n@usage os.spawn(nil, { 'lua', buffer.filename }, nil, nil, print)\n@usage p = os.spawn(nil, { 'lua', '-e', 'print(io.read())' }, nil, '', print)\n       p('foo\n')\n@return function that sends subsequent standard input strings to the child.\n  Passing `nil` kills the process prematurely. Trying to pass stdin to a dead\n  process will throw an error. You can check if a process `p` is dead using\n  `exit_cb` or testing if `debug.getupvalue(p, 1)` is `nil`.\n@see _G._CHARSET