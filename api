_G _G._G (module)\n
kill proc.kill(proc)\nKills running `proc`.\n@param proc A running process created by `spawn()`.
proc _G.proc (module)\nUserdata representing a process created by `spawn()`.
spawn _G.spawn(argv, working_dir, stdout_cb, stderr_cb, exit_cb)\nSpawns an interactive child process in a separate thread with the help of\nGLib.\n@param argv A command line string containing the program's name followed by\n  arguments to pass to it. `PATH` is searched for program names.\n@param working_dir The child's current working directory (cwd) or `nil` to\n  inherit the parent's.\n@param stdout_cb A Lua function that accepts a string parameter for a block\n  of standard output read from the child. Stdout is read asynchronously in\n  1KB or 0.5KB blocks (depending on the platform), or however much data is\n  available at the time.\n@param stderr_cb A Lua function that accepts a string parameter for a block\n  of standard error read from the child. Stderr is read asynchronously in 1KB\n  or 0.5kB blocks (depending on the platform), or however much data is\n  available at the time.\n@param exit_cb A Lua function that is called when the child process finishes.\n  The child's exit status is passed.\n@usage spawn('lua buffer.filename', nil, print)\n@usage proc = spawn('lua -e "print(io.read())", nil, print)\n       proc:write('foo\\n')\n@return proc\n@see _G._CHARSET\n@see proc
status proc.status(proc)\nReturns the status of `proc`, which is either "running" or "terminated".\n@param proc A process created by `spawn()`.\n@return "running" or "terminated"
wait proc.wait(proc)\nBlocks until `proc` finishes.\n@param proc A process created by `spawn()`.
write proc.write(proc, ...)\nWrites string `input` to the stdin of `proc`.\n@param proc A process created by `spawn()`.\n@param ... Standard input for `proc`.