_G _G._G (module)\n
kill proc.kill(proc)\nKills running `proc`.\n@param proc A running process created by `spawn()`.
proc _G.proc (module)\nUserdata representing a process created by `spawn()`.
spawn _G.spawn(argv, working_dir, stdout_cb, stderr_cb, exit_cb)\nSpawns an interactive child process in a separate thread with the help of\nGLib.\n@param argv A UTF-8-encoded command line string containing the program's name\n  followed by arguments to pass to it. Your `PATH` is searched for program\n  names.\n@param working_dir The child's UTF-8 current working directory (cwd) or `nil`\n  to inherit Textadept's.\n@param stdout_cb A Lua function that accepts a string parameter for the\n  standard output from the child. Stdout is read asynchronously in 1KB blocks\n  or however much data is available at the time. It is encoded in `_CHARSET`.\n@param stderr_cb A Lua function that accepts a string parameter for the\n  standard error from the child. Stderr is read asynchronously in 1KB blocks\n  or however much data is available at the time. It is encoded in `_CHARSET`.\n@param exit_cb A Lua function that is called when the child process finishes.\n@usage spawn('lua buffer.filename', nil, print)\n@usage proc = spawn('lua -e "print(io.read())", nil, print)\n       proc:write('foo\\n')\n@return proc\n@see _G._CHARSET\n@see proc
status proc.status(proc)\nReturns the status of `proc`, which is either "running" or "terminated".\n@param proc A process created by `spawn()`.\n@return "running" or "terminated"
wait proc.wait(proc)\nBlocks until `proc` finishes.\n@param proc A process created by `spawn()`.
write proc.write(proc, input)\nWrites string `input` to the stdin of `proc`.\n@param proc A process created by `spawn()`.\n@param input Standard input for `proc`.