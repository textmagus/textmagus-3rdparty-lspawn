-- Copyright 2012-2016 Mitchell mitchell.att.foicica.com. See LICENSE.

---
-- Userdata representing a process created by `spawn()`.
module('proc')

---
-- Returns the status of process *proc*, which is either "running" or
-- "terminated".
-- @param proc A process created by `spawn()`.
-- @return "running" or "terminated"
function status(proc) end

---
-- Blocks until process *proc* finishes.
-- @param proc A process created by `spawn()`.
function wait(proc) end

---
-- Reads and returns stdout from process *proc*, according to string format or
-- number *arg*.
-- Similar to Lua's `io.read()` and blocks for input. *proc* must still be
-- running. If an error occurs while reading, returns `nil`, an error code, and
-- an error message.
-- Ensure any read operations read all stdout available. The stdout callback
-- function passed to `spawn()` will not be called until the stdout buffer is
-- clear.
-- @param proc A process created by `spawn()`.
-- @param arg Optional argument similar to those in Lua's `io.read()`, but "n"
--   is not supported. The default value is "l", which reads a line.
-- @return string of bytes read
function read(proc, arg) end

---
-- Writes string input to the stdin of process *proc*.
-- Note: On Linux, if more than 65536 bytes (64K) are to be written, it is
-- possible those bytes need to be written in 65536-byte (64K) chunks, or the
-- process may not receive all input. However, it is also possible that there is
-- a limit on how many bytes can be written in a short period of time, perhaps
-- 196608 bytes (192K).
-- @param proc A process created by `spawn()`.
-- @param ... Standard input for *proc*.
function write(proc, ...) end

---
-- Closes standard input for process *proc*, effectively sending an EOF (end of
-- file) to it.
-- @param proc A process created by `spawn()`.
function close(proc) end

---
-- Kills running process *proc*, or sends it Unix signal *signal*.
-- @param proc A running process created by `spawn()`.
-- @param signal Optional Unix signal to send to *proc*. The default value is 9
--   (`SIGKILL`), which kills the process.
function kill(proc, signal) end
